; Display management routines.
;
; * Horizontal character scrolling (with DMA Delay).
; * Horizontal smooth scrolling.
; * TODO: Sprite multiplexer.
; * Frame counter.

.scope screen {
	IRQ1_LINE = 242
	IRQ2_LINE = 44
	IRQ3_LINE = 46
	
	.export init: {
		; Detect PAL/NTSC
		{
			lda vic.raster
			{
				cmp vic.raster
				beq _cont
			}
			bmi _cont
			
			cmp #$06
			beq ntsc_263
			
			cmp #$05
			beq ntsc_262
			
			; PAL
			; 312 raster lines
			; 63 cycles per line
			lda #$80 ; illegal opcode NOP Immediate
			sta isr3.ntsc_pal_patch_1
			sta isr3.ntsc_pal_patch_2
			jmp _break
			
			; NTSC
			; 263 raster lines
			; 65 cycles per line
			ntsc_263:
			jmp _break
			
			; NTSC
			; 262 raster lines
			; 64 cycles per line
			ntsc_262:
			lda #$04 ; illegal opcode NOP ZeroPage
			sta isr3.ntsc_pal_patch_1
			sta isr3.ntsc_pal_patch_2
		}
		
		; Set up raster IRQ
		php
		sei
		lda #<isr1
		sta irq
		lda #>isr1
		sta irq + 1
		lda vic.cr1
		and #$7f
		sta vic.cr1
		lda #IRQ1_LINE
		sta vic.raster
		inc vic.irqmask
		plp
		
		rts
	}
	
	; Raster ISR, fires on line 242
	isr1: {
		; Save accumulator
		pha
		
		; Disable screen
		lda #$7b
		sta vic.cr1
		
		; Set up next raster IRQ in chain
		lda #<isr2
		sta irq
		lda #>isr2
		sta irq + 1
		lda #IRQ2_LINE
		sta vic.raster
		
		; Ack IRQ and re-enable interrupts
		lda #1
		sta vic.irqstatus
		cli
		
		; Restore accumulator and return
		pla
		rti
	}
	
	.align $100 $??
	isr2: {
		; Save registers
		pha ; 2
		txa ; 5
		pha ; 8
		
		; Set up another raster IRQ for the next line
		lda #<isr3 ; 10
		sta irq ; 14
		lda #>isr3 ; 16
		sta irq+1 ; 20
		lda #IRQ3_LINE ; 22
		sta vic.raster ; 26
		
		; Acknowledge the IRQ
		inc vic.irqstatus; 32
		
		; Save the stack pointer
		tsx ; 34
		
		; If there are frames ready, update the screen buffers.
		{
			lda #0 ; 36
			cmp frames_ready ; 39
			beq _break ; 41/42
			lda x ; 44
			sta buffer.x ; 47
			lda x + 1 ; 50
			sta buffer.x + 1 ; 53
		} ; 42/53
		
		; Enable IRQs
		cli ; 44/55
		
		; nop until the next IRQ
		{
			nop ; 46/57
			nop ; 48/59
			nop ; 50/61
			nop ; 52/63
			nop ; 54/65
			nop ; 56/67
			nop ; 58/69
			nop ; 60/71
			nop ; 62/73
			nop ; 64/75
			nop ; 66/77
			nop ; 68/79
			nop ; 70/81
			nop ; 72/83
			nop ; 74/85
			nop ; 76/87
			nop ; 78/89
			nop ; 80/91
			nop ; 82/93
			nop ; 84/95
			nop ; 86/97
			nop ; 88/99
			nop ; 90/101
			nop ; 92/103
			nop ; 94/105
			nop ; 96/107
			nop ; 98/109
			nop ; 100/111
			nop ; 102/113
			nop ; 104/115
			nop ; 106/117
			nop ; 108/119
			nop ; 110/121
			nop ; 112/123
			nop ; 114/125
			nop ; 116/127
			nop ; 118/129
			nop ; 120/131
			nop ; 122/133
			nop ; 124/135
			nop ; 126/137
			nop ; 128/139
			nop ; 130/141 (IRQ should have happened by now)
			jmp _cont ; compatibility with freezer carts
		}
	}

	.align $100 $??
	.scope isr3 {
		; Restore the stack pointer saved by isr2
		txs ; 2
		
		; Set pixel scroll position
		lda buffer.x ; 5
		and #$07 ; 7
		sta vic.cr2 ; 11
		
		; Delay 40/41/42 cycles
		ldx #5
		{
			dex ; 2
			bne _cont ; 3/2
		}
		.global ntsc_pal_patch_1:
		nop
		nop
		nop
		nop
		bit $ff
		
		; Correct for 1-cycle wobble
		lda vic.raster
		cmp vic.raster
		{ beq _break }
		
		lda #$11
		sta vic.cr1
		
		; Calculate the character scroll position (x / 8)
		char_x=zp.screen.char_x
		lda buffer.x+1 ; 3
		lsr ; 5
		sta char_x+1 ; 8
		lda buffer.x ; 11
		ror ; 13
		sta char_x ; 16
		lsr char_x+1 ; 21
		ror char_x ; 26
		lsr char_x+1 ; 31
		ror char_x ; 36
		
		; Calculate a variable delay by branching over nops.
		; The delay is accurate to 2 cycles.
		lda #39 ; 38
		sec ; 40
		sbc char_x ; 43
		lsr ; 45
		sta x_branch_offset ; 49
		
		; Introduce an additional 1-cycle delay if the LSB of the x
		; offset is set.
		{ bcc _break }
		
		; Branch somewhere into the nops depending on the x offset.
		{ clv }
		x_branch_offset = * + 1
		bvc *
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		
		; Here is the furthest that bvc will ever branch
		nop
		
		; Patchable 2/3/4 cycle delay for NTSC/PAL compatibility
		.global ntsc_pal_patch_2:
		nop
		nop
		
		; Do the DMA Delay by tweaking vic.cr1 at the correct time
		lda #%01111011
		dec vic.cr1
		inc vic.cr1
		sta vic.cr1
		
		; Acknowledge the IRQ
		lda #1
		sta vic.irqstatus
		
		; Enable screen
		lda #$1b
		sta vic.cr1
		
		; Set up next raster IRQ in chain
		lda #<isr1
		sta irq
		lda #>isr1
		sta irq + 1
		lda #IRQ1_LINE
		sta vic.raster
		
		; Increment frame counter
		lda frames_pending
		sec
		sbc frames_ready
		{
			bcs _break
			lda #0
		}
		{
			cmp #$ff
			beq _break
			clc
			adc #1
		}
		sta frames_pending
		lda #0
		sta frames_ready
		
		; Restore registers
		pla
		tax
		pla
		
		rti
	}
	
	buffer.x = zp.screen.buffer.x
	
	.global x = zp.screen.x
	.global frames_pending = zp.screen.frames_pending
	.global frames_ready = zp.screen.frames_ready
}
